<?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * @package    theme_mwar
 * @author     Jean-Roch Meurisse
 * @copyright  2016 - Cellule TICE - Unversite de Namur
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */

namespace theme_mwar\output;

use html_writer;
use stdClass;
use moodle_url;
use custom_menu_item;
use custom_menu;
use context_system;

defined('MOODLE_INTERNAL') || die;

class core_renderer extends \theme_boost\output\core_renderer {
    public function full_header() {
        $html = '';//html_writer::div('coucou');
        return $html . parent::full_header(); // TODO: Change the autogenerated stub
    }

    public function extra_navbar_buttons() {
        global $OUTPUT, $CFG;
        $templatecontext = new stdClass();

        $settings = $this->page->theme->settings;

        if (!during_initial_install()) {


            $templatecontext->editbutton = $this->custom_menu_editing();
            $templatecontext->isloggedin = isloggedin();
            /*$callnineoneone = core_plugin_manager::instance()->get_plugin_info('local_callnineoneone');
            global $COURSE, $USER;
            if($callnineoneone &&
                (has_capability('local/callnineoneone:call', context_system::instance()) || user_has_role_assignment($USER->id, 3))){

                $url = new moodle_url('/local/callnineoneone/view.php', array(
                    'bodyid' => $this->page->bodyid,
                    'pagetype' => $this->page->pagetype,
                    'pagelayout' => $this->page->pagelayout,
                    'url' => $this->page->url,
                    'courseid' => $COURSE->id
                ));
                //$url = new moodle_url('/local/callnineoneone/view.php',
                //  array());
                $html = '<li title="' . get_string('callnineoneone', 'local_callnineoneone') . '"><a href="' . $url . '">' . '<i style="font-size:larger;" class="fa fa-ambulance"></i></a></li>';
                $templatecontext->callnineoneone = $html;
            } else {
                $templatecontext->callnineoneone = '';
            }*/
        }

        return $this->render_from_template('theme_mwar/extra_navbar_buttons', $templatecontext);

    }

    // Methods for editmode button in bar.
    public function custom_menu_editing() {
        $html = '';
        //if (!empty($this->page->theme->settings->editbutton)) {
        if(true){
            if ($this->page->user_allowed_editing()) {
                $buttontoadd = true; // Only set to false when cannot determine what the URL / params should be for a page type.
                $pagetype = $this->page->pagetype;
                if (strpos($pagetype, 'admin-setting') !== false) {
                    $pagetype = 'admin-setting'; // Deal with all setting page types.
                } else if ((strpos($pagetype, 'mod') !== false) &&
                    ((strpos($pagetype, 'edit') !== false) || (strpos($pagetype, 'view') !== false) || strpos($pagetype, 'mod') !== false)) {
                    $pagetype = 'mod-edit-view'; // Deal with all mod edit / view page types.
                } else if (strpos($pagetype, 'mod-data-field') !== false) {
                    $pagetype = 'mod-data-field'; // Deal with all mod data field page types.
                } else if (strpos($pagetype, 'mod-lesson') !== false) {
                    $pagetype = 'mod-lesson'; // Deal with all mod lesson page types.
                }
                switch ($pagetype) {
                    case 'site-index':
                    case 'calendar-view':  // Slightly faulty as even the navigation link goes back to the frontpage.  TODO: MDL.
                        $url = new moodle_url('/course/view.php');
                        $url->param('id', 1);
                        if ($this->page->user_is_editing()) {
                            $url->param('edit', 'off');
                        } else {
                            $url->param('edit', 'on');
                        }
                        break;
                    case 'admin-index':
                    case 'admin-setting':
                        $url = $this->page->url;
                        if ($this->page->user_is_editing()) {
                            $url->param('adminedit', 0);
                        } else {
                            $url->param('adminedit', 1);
                        }
                        break;
                    case 'course-index':
                    case 'course-management':
                    case 'course-search':
                    case 'mod-resource-mod':
                    case 'tag-search':
                        $buttontoadd = false;
                        break;
                    case 'mod-data-field':
                    case 'mod-edit-view':
                    case 'mod-forum-discuss':
                    case 'mod-forum-index':
                    case 'mod-forum-search':
                    case 'mod-forum-subscribers':
                    case 'mod-lesson':
                    case 'mod-quiz-index':
                    case 'mod-scorm-player':
                        $url = new moodle_url('/course/view.php');
                        $url->param('id', $this->page->course->id);
                        $url->param('return', $this->page->url->out_as_local_url(false));
                        if ($this->page->user_is_editing()) {
                            $url->param('edit', 'off');
                        } else {
                            $url->param('edit', 'on');
                        }
                        break;
                    case 'my-index':
                    case 'user-profile':
                        // TODO: Not sure how to get 'id' param and if it is really needed.
                        $url = $this->page->url;
                        // Umm! Both /user/profile.php and /user/profilesys.php have the same page type but different parameters!
                        if ($this->page->user_is_editing()) {
                            $url->param('adminedit', 0);
                            $url->param('edit', 0);
                        } else {
                            $url->param('adminedit', 1);
                            $url->param('edit', 1);
                        }

                        break;
                    default:
                        $url = $this->page->url;
                        if ($this->page->user_is_editing()) {
                            $url->param('edit', 'off');
                        } else {
                            $url->param('edit', 'on');
                        }
                        break;
                    /*default:
                        //$url = $this->page->url;
                        $course = $this->page->course;
                        if ($this->page->url->compare(new moodle_url('/course/view.php'), URL_MATCH_BASE)) {
                            // We are on the course page, retain the current page params e.g. section.
                            $url = clone($this->page->url);
                            //$baseurl->param('sesskey', sesskey());
                        } else {
                            // Edit on the main course page.
                            $url = new moodle_url('/course/view.php', array('id'=>$course->id, 'return'=>$this->page->url->out_as_local_url(false)));
                        }
                        if ($this->page->user_is_editing()) {
                            $url->param('edit', 'off');
                        } else {
                            $url->param('edit', 'on');
                        }
                        break;*/
                }
                if ($buttontoadd) {
                    $url->param('sesskey', sesskey());
                    if ($this->page->user_is_editing()) {
                        $editstring = get_string('turneditingoff');
                        //$editstring = 'turneditingoff';
                    } else {
                        $editstring = get_string('turneditingon');
                        //$editstring = 'turneditingon';
                    }
                    $html = '<a href="' .
                        $url .
                        '"  class="switch " title="' .
                        $editstring .
                        '">' .
                        //get_string('editmode', 'theme_mwar') .
                        ' </a>';
                    if (!empty($this->page->theme->settings->hidedefaulteditingbutton) && 'my-index' !== $pagetype) {
                        // Unset button on page.
                        $this->page->set_button('');
                    } else if ('my-index' === $pagetype && !$this->page->user_is_editing()) {
                        $this->page->set_button('');
                    }

                }
            }
        }
        return $html;
    }

    /*
     * This renders the bootstrap top menu.
     *
     * This renderer is needed to enable the Bootstrap style navigation.
     */
    protected function render_custom_menu(custom_menu $menu) {
        global $CFG, $USER;
        if (!empty($this->page->theme->settings->navbarhomelink)) {
            $branchtitle = get_string('home');
            $branchlabel = '<i class="fa fa-home"></i>' . $branchtitle;
            $branchurl = new moodle_url('/?redirect=0');
            $menu->add($branchlabel, $branchurl, $branchtitle);
        }
        if (isloggedin() && !isguestuser()) {

            if (!empty($this->page->theme->settings->navbardashboardlink)) {
                $branchtitle = get_string('myhome');
                $branchlabel = '<i class="fa fa-dashboard"></i> ' . $branchtitle;
                $branchurl = new moodle_url('/my');
                $menu->add($branchlabel, $branchurl, $branchtitle);
            }
            if (!empty($this->page->theme->settings->navbarcalendarlink)) {
                $branchtitle = get_string('calendarlink', 'theme_unamurui');
                $branchlabel = '<i class="fa fa-calendar"></i> ' . $branchtitle;
                $branchurl = new moodle_url('/calendar/view.php?view=month');
                $menu->add($branchlabel, $branchurl, $branchtitle);
            }
            if (!empty($this->page->theme->settings->navbarpersonalcourselist) || true) {
                //$branchtitle = get_string('mycourses', 'theme_unamurui');
                $branchtitle = 'My courses';
                $branchlabel = '<i class="fa fa-briefcase"></i> ' . $branchtitle;
                $branchurl = new moodle_url('/my/index.php');

                $branch = $menu->add($branchlabel, $branchurl, $branchtitle);
                if ($mycourses = enrol_get_my_courses(null, 'fullname ASC')) {
                    foreach ($mycourses as $mycourse) {
                        if ($mycourse->visible) {
                            $branch->add(
                                '<i class="fa fa-book"></i> ' . format_string($mycourse->shortname . ' - ' . $mycourse->fullname),
                                new moodle_url('/course/view.php?id=' . $mycourse->id),
                                format_string($mycourse->shortname));
                        } else if (has_capability('moodle/course:viewhiddencourses', context_course::instance($mycourse->id))) {
                            $branch->add('<span class="dimmed_text"><i class="fa fa-eye-slash"></i> ' .
                                format_string($mycourse->fullname) . '</span>',
                                new moodle_url('/course/view.php', array('id' => $mycourse->id)),
                                format_string($mycourse->shortname));
                        }
                    }

                } else {
                    //$nocoursesstring = get_string('emptycourselist', 'theme_unamurui');
                    $nocoursesstring = 'emptycourselist';
                    $branch->add('<em>' . $nocoursesstring . '</em>', new moodle_url('/'), $nocoursesstring);
                }
                $branch->add(
                    '#######',
                    new moodle_url('/'),
                    '#######'
                );
                $branch->add(
                    '<i class="fa fa-list"></i> ' . get_string('fulllistofcourses'),
                    new moodle_url($CFG->wwwroot . '/course/index.php'),
                    get_string('fulllistofcourses')
                );

                if (substr_count($USER->email, '@student.unamur.be')) {
                    $branch->add(
                        '#######',
                        new moodle_url('/'),
                        '#######'
                    );
                    $branch->add(
                        '<i class="fa fa-plus"></i> ' . 'M\'inscrire aux cours de mon programme...',
                        new moodle_url($CFG->wwwroot . '/local/unamur/noe/enrolnoecourses.php'),
                        'M\'inscre aux cours de mon programme'
                    );
                }
                if (true) {//(has_capability('local/createcourse:create', context_system::instance())) {
                    $branch->add(
                        '#######',
                        new moodle_url('/'),
                        '#######'
                    );

                    $branch->add(
                        '<i class="fa fa-plus"></i> ' . 'Créer un cours...',
                        new moodle_url($CFG->wwwroot . '/local/createcourse/index.php'),
                        'Créer un cours'
                    );
                }
                if (has_capability('moodle/course:create', context_system::instance())) {
                    $branch->add(
                        '<i class="fa fa-plus"></i> ' . 'Créer un cours... (manuel)',
                        new moodle_url($CFG->wwwroot . '/course/edit.php?category=1&returnto=topcat'),
                        'Créer un cours'
                    );
                }

            }
        }

        $langs = get_string_manager()->get_list_of_translations();
        $haslangmenu = $this->lang_menu() != '';

        if (!$menu->has_children() && !$haslangmenu) {
            return '';
        }

        if ($haslangmenu) {
            $strlang = get_string('language');
            $currentlang = current_language();
            if (isset($langs[$currentlang])) {
                $currentlang = $langs[$currentlang];
            } else {
                $currentlang = $strlang;
            }
            $this->language = $menu->add($currentlang, new moodle_url('#'), $strlang, 10000);
            foreach ($langs as $langtype => $langname) {
                $this->language->add($langname, new moodle_url($this->page->url, array('lang' => $langtype)), $langname);
            }
        }

        $content = '';
        foreach ($menu->get_children() as $item) {
            $context = $item->export_for_template($this);
            $content .= $this->render_from_template('core/custom_menu_item', $context);
        }

        return $content;
    }
}