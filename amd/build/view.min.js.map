{"version":3,"file":"view.min.js","sources":["../src/view.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Manage the courses view for the overview block.\n * Additions to the core block_myoverview view.js file.\n *\n * @module     block_myoverview\n * @copyright  2019 Jean-Roch Meurisse - Cellule TICE - Unversite de Namur\n * @copyright  2018 Bas Brands <bas@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(\n[\n    'jquery',\n    'core/str',\n    'theme_receptic/repository',\n    'core/paged_content_factory',\n    'core/pubsub',\n    'core/custom_interaction_events',\n    'core/notification',\n    'core/templates',\n    'core_course/events',\n    'block_myoverview/selectors',\n    'core/paged_content_events',\n    'core/modal_factory',\n    'core/modal_events'\n],\nfunction(\n    $,\n    Str,\n    Repository,\n    PagedContentFactory,\n    PubSub,\n    CustomEvents,\n    Notification,\n    Templates,\n    CourseEvents,\n    Selectors,\n    PagedContentEvents,\n    ModalFactory,\n    ModalEvents\n) {\n\n    var SELECTORS = {\n        COURSE_REGION: '[data-region=\"course-view-content\"]',\n        ACTION_HIDE_COURSE: '[data-action=\"hide-course\"]',\n        ACTION_SHOW_COURSE: '[data-action=\"show-course\"]',\n        ACTION_ADD_FAVOURITE: '[data-action=\"add-favourite\"]',\n        ACTION_REMOVE_FAVOURITE: '[data-action=\"remove-favourite\"]',\n        FAVOURITE_ICON: '[data-region=\"favourite-icon\"]',\n        ICON_IS_FAVOURITE: '[data-region=\"is-favourite\"]',\n        ICON_NOT_FAVOURITE: '[data-region=\"not-favourite\"]',\n        PAGED_CONTENT_CONTAINER: '[data-region=\"page-container\"]',\n        ACTION_MAKE_VISIBLE: '[data-action=\"makevisible-course\"]',\n        ACTION_MAKE_INVISIBLE: '[data-action=\"makeinvisible-course\"]',\n        ACTION_UNENROLME: '[data-action=\"unenrolme\"]',\n    };\n\n    var TEMPLATES = {\n        COURSES_CARDS: 'block_myoverview/view-cards',\n        COURSES_LIST: 'block_myoverview/view-list',\n        COURSES_SUMMARY: 'block_myoverview/view-summary',\n        NOCOURSES: 'core_course/no-courses'\n    };\n\n    var GROUPINGS = {\n        GROUPING_ALLINCLUDINGHIDDEN: 'allincludinghidden',\n        GROUPING_ALL: 'all',\n        GROUPING_INPROGRESS: 'inprogress',\n        GROUPING_FUTURE: 'future',\n        GROUPING_PAST: 'past',\n        GROUPING_FAVOURITES: 'favourites',\n        GROUPING_HIDDEN: 'hidden'\n    };\n\n    var NUMCOURSES_PERPAGE = [12, 24, 48, 96, 0];\n\n    var loadedPages = [];\n\n    var courseOffset = 0;\n\n    var lastPage = 0;\n\n    var lastLimit = 0;\n\n    var namespace = null;\n\n    /**\n     * Confirm action modal window for myoverview block actions.\n     *\n     * @param {object} root The root element.\n     * @param {Number} courseId The course for which an action must be confirmed.\n     * @param {string} method The action to be confirmed.\n     * @param {object} args Misc function parameters.\n     * @return {Promise} The modal result.\n     */\n    function confirmAction(root, courseId, method, args) {\n\n        var strings = [];\n\n        switch(method) {\n            case 'makeVisible' :\n                strings.push({\n                    key: 'makevisible',\n                    component: 'theme_receptic'\n                });\n                strings.push({\n                    key: 'confirmmakevisible',\n                    component: 'theme_receptic'\n                });\n                break;\n            case 'makeInvisible' :\n                strings.push({\n                    key: 'makeinvisible',\n                    component: 'theme_receptic'\n                });\n                strings.push({\n                    key: 'confirmmakeinvisible',\n                    component: 'theme_receptic'\n                });\n                break;\n            case 'unenrolMe' :\n                strings.push({\n                    key: 'unenrolme',\n                    component: 'theme_receptic'\n                });\n                strings.push({\n                    key: 'confirmunenrolme',\n                    component: 'theme_receptic'\n                });\n                break;\n        }\n\n        var modalPromise;\n        modalPromise = ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL\n        });\n\n        modalPromise.then(function(deleteModal) {\n            deleteModal.show();\n\n            return;\n        })\n        .fail(Notification.exception);\n\n        var stringsPromise = Str.get_strings(strings);\n\n        var finalPromise = $.when(stringsPromise, modalPromise)\n            .then(function(strings, deleteModal) {\n                deleteModal.setTitle(strings[0]);\n                deleteModal.setBody(strings[1]);\n\n                deleteModal.setSaveButtonText(strings[0]);\n\n                deleteModal.getRoot().on(ModalEvents.save, function() {\n                    switch(method) {\n                        case 'makeVisible' :\n                            makeVisible(root, courseId);\n                            break;\n                        case 'makeInvisible' :\n                            makeInvisible(root, courseId);\n                            break;\n                        case 'unenrolMe' :\n                            unenrolMe(root, courseId, args.instanceId);\n                            hideElement(root, args.target);\n                            break;\n                    }\n                });\n\n                return deleteModal;\n            })\n            .fail(Notification.exception);\n\n        return finalPromise;\n    }\n    /**\n     * Get filter values from DOM.\n     *\n     * @param {object} root The root element for the courses view.\n     * @return {filters} Set filters.\n     */\n    var getFilterValues = function(root) {\n        var courseRegion = root.find(Selectors.courseView.region);\n        return {\n            display: courseRegion.attr('data-display'),\n            grouping: courseRegion.attr('data-grouping'),\n            sort: courseRegion.attr('data-sort'),\n            displaycategories: courseRegion.attr('data-displaycategories'),\n            customfieldname: courseRegion.attr('data-customfieldname'),\n            customfieldvalue: courseRegion.attr('data-customfieldvalue'),\n        };\n    };\n\n    // We want the paged content controls below the paged content area.\n    // and the controls should be ignored while data is loading.\n    var DEFAULT_PAGED_CONTENT_CONFIG = {\n        ignoreControlWhileLoading: true,\n        controlPlacementBottom: true,\n        persistentLimitKey: 'block_myoverview_user_paging_preference'\n    };\n\n    /**\n     * Get enrolled courses from backend.\n     *\n     * @param {object} filters The filters for this view.\n     * @param {int} limit The number of courses to show.\n     * @return {promise} Resolved with an array of courses.\n     */\n    var getMyCourses = function(filters, limit) {\n\n        return Repository.getEnrolledCoursesByTimeline({\n            offset: courseOffset,\n            limit: limit,\n            classification: filters.grouping,\n            sort: filters.sort,\n            customfieldname: filters.customfieldname,\n            customfieldvalue: filters.customfieldvalue\n        });\n    };\n\n    /**\n     * Get the container element for the favourite icon.\n     *\n     * @param  {Object} root The course overview container\n     * @param  {Number} courseId Course id number\n     * @return {Object} The favourite icon container\n     */\n    var getFavouriteIconContainer = function(root, courseId) {\n        return root.find(SELECTORS.FAVOURITE_ICON + '[data-course-id=\"' + courseId + '\"]');\n    };\n\n    /**\n     * Get the paged content container element.\n     *\n     * @param  {Object} root The course overview container\n     * @param  {Number} index Rendered page index.\n     * @return {Object} The rendered paged container.\n     */\n    var getPagedContentContainer = function(root, index) {\n        return root.find('[data-region=\"paged-content-page\"][data-page=\"' + index + '\"]');\n    };\n\n    /**\n     * Get the course id from a favourite element.\n     *\n     * @param {Object} root The favourite icon container element.\n     * @return {Number} Course id.\n     */\n    var getCourseId = function(root) {\n        return root.attr('data-course-id');\n    };\n\n    /**\n     * Hide the favourite icon.\n     *\n     * @param {Object} root The favourite icon container element.\n     * @param  {Number} courseId Course id number.\n     */\n    var hideFavouriteIcon = function(root, courseId) {\n        var iconContainer = getFavouriteIconContainer(root, courseId);\n        var isFavouriteIcon = iconContainer.find(SELECTORS.ICON_IS_FAVOURITE);\n        isFavouriteIcon.addClass('hidden');\n        isFavouriteIcon.attr('aria-hidden', true);\n        var notFavourteIcon = iconContainer.find(SELECTORS.ICON_NOT_FAVOURITE);\n        notFavourteIcon.removeClass('hidden');\n        notFavourteIcon.attr('aria-hidden', false);\n    };\n\n    /**\n     * Show the favourite icon.\n     *\n     * @param  {Object} root The course overview container.\n     * @param  {Number} courseId Course id number.\n     */\n    var showFavouriteIcon = function(root, courseId) {\n        var iconContainer = getFavouriteIconContainer(root, courseId);\n        var isFavouriteIcon = iconContainer.find(SELECTORS.ICON_IS_FAVOURITE);\n        isFavouriteIcon.removeClass('hidden');\n        isFavouriteIcon.attr('aria-hidden', false);\n        var notFavourteIcon = iconContainer.find(SELECTORS.ICON_NOT_FAVOURITE);\n        notFavourteIcon.addClass('hidden');\n        notFavourteIcon.attr('aria-hidden', true);\n    };\n\n    /**\n     * Get the action menu item\n     *\n     * @param {Object} root  root The course overview container\n     * @param {Number} courseId Course id.\n     * @return {Object} The add to favourite menu item.\n     */\n    var getAddFavouriteMenuItem = function(root, courseId) {\n        return root.find('[data-action=\"add-favourite\"][data-course-id=\"' + courseId + '\"]');\n    };\n\n    /**\n     * Get the action menu item\n     *\n     * @param {Object} root  root The course overview container\n     * @param {Number} courseId Course id.\n     * @return {Object} The remove from favourites menu item.\n     */\n    var getRemoveFavouriteMenuItem = function(root, courseId) {\n        return root.find('[data-action=\"remove-favourite\"][data-course-id=\"' + courseId + '\"]');\n    };\n\n    /**\n     * Add course to favourites\n     *\n     * @param  {Object} root The course overview container\n     * @param  {Number} courseId Course id number\n     */\n    var addToFavourites = function(root, courseId) {\n        var removeAction = getRemoveFavouriteMenuItem(root, courseId);\n        var addAction = getAddFavouriteMenuItem(root, courseId);\n\n        setCourseFavouriteState(courseId, true).then(function(success) {\n            if (success) {\n                PubSub.publish(CourseEvents.favourited, courseId);\n                removeAction.removeClass('hidden');\n                addAction.addClass('hidden');\n                showFavouriteIcon(root, courseId);\n            } else {\n                Notification.alert('Starring course failed', 'Could not change favourite state');\n            }\n            return;\n        }).catch(Notification.exception);\n    };\n\n    /**\n     * Remove course from favourites\n     *\n     * @param  {Object} root The course overview container\n     * @param  {Number} courseId Course id number\n     */\n    var removeFromFavourites = function(root, courseId) {\n        var removeAction = getRemoveFavouriteMenuItem(root, courseId);\n        var addAction = getAddFavouriteMenuItem(root, courseId);\n\n        setCourseFavouriteState(courseId, false).then(function(success) {\n            if (success) {\n                PubSub.publish(CourseEvents.unfavorited, courseId);\n                removeAction.addClass('hidden');\n                addAction.removeClass('hidden');\n                hideFavouriteIcon(root, courseId);\n            } else {\n                Notification.alert('Starring course failed', 'Could not change favourite state');\n            }\n            return;\n        }).catch(Notification.exception);\n    };\n\n    /**\n     * Get the makeVisible action menu item.\n     *\n     * @param  {Object} root The course overview container\n     * @param  {Number} courseId Course id number\n     * @return {Object} The makeVisible menu item.\n     */\n    var getMakeVisibleMenuItem = function(root, courseId) {\n        return root.find('[data-action=\"makevisible-course\"][data-course-id=\"' + courseId + '\"]');\n    };\n\n    /**\n     * Get the makeInvisible action menu item.\n     *\n     * @param  {Object} root The course overview container\n     * @param  {Number} courseId Course id number\n     * @return {Object} The makeInvisible menu item.\n     */\n    var getMakeInvisibleMenuItem = function(root, courseId) {\n        return root.find('[data-action=\"makeinvisible-course\"][data-course-id=\"' + courseId + '\"]');\n    };\n\n    /**\n     * Get the course name node.\n     *\n     * @param  {Object} root The course overview container\n     * @param  {Number} courseId Course id number\n     * @return {Object} The course name node.\n     */\n    var getCourseNameItem = function(root, courseId) {\n        return root.find('[data-region=\"courses-view\"] .coursename[data-course-id=\"' + courseId + '\"]');\n    };\n\n    /**\n     * Get the course element list node.\n     *\n     * @param  {Object} root The course overview container\n     * @param  {Number} courseId Course id number\n     * @return {Object} The course list item.\n     */\n    var getCourseListElement = function(root, courseId) {\n        return root.find('[data-region=\"courses-view\"] .course-listitem[data-course-id=\"' + courseId + '\"]');\n    };\n\n    /**\n     * Get the course hidden warning.\n     *\n     * @param  {Object} root The course overview container\n     * @param  {Number} courseId Course id number\n     * @return {Object} The course hidden warning node.\n     */\n    var getCourseHiddenWarningItem = function(root, courseId) {\n        return root.find('[data-region=\"courses-view\"] .hiddenwarning[data-course-id=\"' + courseId + '\"]');\n    };\n\n    /**\n     * Make course available to students.\n     *\n     * @param  {Object} root The course overview container\n     * @param  {Number} courseId Course id number\n     */\n    var makeVisible = function(root, courseId) {\n        var makeVisibleAction = getMakeVisibleMenuItem(root, courseId);\n        var makeInvisibleAction = getMakeInvisibleMenuItem(root, courseId);\n        var courseName = getCourseNameItem(root, courseId);\n        var courseHiddenWarning = getCourseHiddenWarningItem(root, courseId);\n\n        setCourseVisibility(courseId, true).then(function(success) {\n            if (success) {\n                makeVisibleAction.addClass('hidden');\n                makeInvisibleAction.removeClass('hidden');\n                courseName.removeClass('text-muted');\n                courseHiddenWarning.removeClass('d-flex').addClass('d-none');\n            } else {\n                Notification.alert('Starring course failed', 'Could not change favourite state');\n            }\n            return;\n        }).catch(Notification.exception);\n    };\n\n    /**\n     * Make course unavailable to students.\n     *\n     * @param  {Object} root The course overview container\n     * @param  {Number} courseId Course id number\n     */\n    var makeInvisible = function(root, courseId) {\n        var makeVisibleAction = getMakeVisibleMenuItem(root, courseId);\n        var makeInvisibleAction = getMakeInvisibleMenuItem(root, courseId);\n        var courseName = getCourseNameItem(root, courseId);\n        var courseHiddenWarning = getCourseHiddenWarningItem(root, courseId);\n\n        setCourseVisibility(courseId, false).then(function(success) {\n            if (success) {\n                makeVisibleAction.removeClass('hidden');\n                makeInvisibleAction.addClass('hidden');\n                courseName.addClass('text-muted');\n                courseHiddenWarning.removeClass('d-none').addClass('d-flex');\n            } else {\n                Notification.alert('Starring course failed', 'Could not change favourite state');\n            }\n            return;\n        }).catch(Notification.exception);\n    };\n\n    /**\n     * Set the courses visibility status and push to repository.\n     *\n     * @param  {Number} courseId Course id to favourite.\n     * @param  {Bool} visible new visibility status.\n     * @return {Promise} Repository promise.\n     */\n    var setCourseVisibility = function(courseId, visible) {\n\n        return Repository.changeCourseVisibility({\n\n            'id': courseId,\n            'visible': visible\n\n        }).then(function(result) {\n            if (result.warnings.length == 0) {\n                loadedPages.forEach(function(courseList) {\n                    courseList.courses.forEach(function(course, index) {\n                        if (course.id == courseId) {\n                            courseList.courses[index].visible = visible;\n                        }\n                    });\n                });\n                return true;\n            } else {\n                return false;\n            }\n        }).catch(Notification.exception);\n    };\n\n    /**\n     * Unenrol current student from course.\n     *\n     * @param  {Object} root The course overview container\n     * @param  {Number} courseId Course id number\n     * @param  {Number} instanceId The enrolment instance id\n     * @return {Bool} Unenrolment done or not.\n     */\n    var unenrolMe = function(root, courseId, instanceId) {\n        return Repository.unenrolMe({\n\n            'id': courseId,\n            'instanceid': instanceId\n\n        }).then(function(result) {\n            if (result.warnings.length == 0) {\n                var courseListElement = getCourseListElement(root, courseId);\n                $(courseListElement).remove();\n                return true;\n            } else {\n                return false;\n            }\n        }).catch(Notification.exception);\n    };\n\n    /**\n     * Get the action menu item\n     *\n     * @param {Object} root  root The course overview container\n     * @param {Number} courseId Course id.\n     * @return {Object} The hide course menu item.\n     */\n    var getHideCourseMenuItem = function(root, courseId) {\n        return root.find('[data-action=\"hide-course\"][data-course-id=\"' + courseId + '\"]');\n    };\n\n    /**\n     * Get the action menu item\n     *\n     * @param {Object} root  root The course overview container\n     * @param {Number} courseId Course id.\n     * @return {Object} The show course menu item.\n     */\n    var getShowCourseMenuItem = function(root, courseId) {\n        return root.find('[data-action=\"show-course\"][data-course-id=\"' + courseId + '\"]');\n    };\n\n    /**\n     * Hide course\n     *\n     * @param  {Object} root The course overview container\n     * @param  {Number} courseId Course id number\n     */\n    var hideCourse = function(root, courseId) {\n        var hideAction = getHideCourseMenuItem(root, courseId);\n        var showAction = getShowCourseMenuItem(root, courseId);\n        var filters = getFilterValues(root);\n\n        setCourseHiddenState(courseId, true);\n\n        // Remove the course from this view as it is now hidden and thus not covered by this view anymore.\n        // Do only if we are not in \"All\" view mode where really all courses are shown.\n        if (filters.grouping != GROUPINGS.GROUPING_ALLINCLUDINGHIDDEN) {\n            hideElement(root, courseId);\n        }\n\n        hideAction.addClass('hidden');\n        showAction.removeClass('hidden');\n    };\n\n    /**\n     * Show course\n     *\n     * @param  {Object} root The course overview container\n     * @param  {Number} courseId Course id number\n     */\n    var showCourse = function(root, courseId) {\n        var hideAction = getHideCourseMenuItem(root, courseId);\n        var showAction = getShowCourseMenuItem(root, courseId);\n        var filters = getFilterValues(root);\n\n        setCourseHiddenState(courseId, null);\n\n        // Remove the course from this view as it is now shown again and thus not covered by this view anymore.\n        // Do only if we are not in \"All\" view mode where really all courses are shown.\n        if (filters.grouping != GROUPINGS.GROUPING_ALLINCLUDINGHIDDEN) {\n            hideElement(root, courseId);\n        }\n\n        hideAction.removeClass('hidden');\n        showAction.addClass('hidden');\n    };\n\n    /**\n     * Set the courses hidden status and push to repository\n     *\n     * @param  {Number} courseId Course id to favourite.\n     * @param  {Bool} status new hidden status.\n     * @return {Promise} Repository promise.\n     */\n    var setCourseHiddenState = function(courseId, status) {\n\n        // If the given status is not hidden, the preference has to be deleted with a null value.\n        if (status === false) {\n            status = null;\n        }\n        return Repository.updateUserPreferences({\n            preferences: [\n                {\n                    type: 'block_myoverview_hidden_course_' + courseId,\n                    value: status\n                }\n            ]\n        });\n    };\n\n    /**\n     * Reset the loadedPages dataset to take into account the hidden element\n     *\n     * @param {Object} root The course overview container\n     * @param {Number} id The course id number\n     */\n    var hideElement = function(root, id) {\n        var pagingBar = root.find('[data-region=\"paging-bar\"]');\n        var jumpto = parseInt(pagingBar.attr('data-active-page-number'));\n\n        // Get a reduced dataset for the current page.\n        var courseList = loadedPages[jumpto];\n        var reducedCourse = courseList.courses.reduce(function(accumulator, current) {\n            if (id != current.id) {\n                accumulator.push(current);\n            }\n            return accumulator;\n        }, []);\n\n        // Get the next page's data if loaded and pop the first element from it.\n        if (loadedPages[jumpto + 1] != undefined) {\n            var newElement = loadedPages[jumpto + 1].courses.slice(0, 1);\n\n            // Adjust the dataset for the reset of the pages that are loaded.\n            loadedPages.forEach(function(courseList, index) {\n                if (index > jumpto) {\n                    var popElement = [];\n                    if (loadedPages[index + 1] != undefined) {\n                        popElement = loadedPages[index + 1].courses.slice(0, 1);\n                    }\n\n                    loadedPages[index].courses = $.merge(loadedPages[index].courses.slice(1), popElement);\n                }\n            });\n\n\n            reducedCourse = $.merge(reducedCourse, newElement);\n        }\n\n        // Check if the next page is the last page and if it still has data associated to it.\n        if (lastPage == jumpto + 1 && loadedPages[jumpto + 1].courses.length == 0) {\n            var pagedContentContainer = root.find('[data-region=\"paged-content-container\"]');\n            PagedContentFactory.resetLastPageNumber($(pagedContentContainer).attr('id'), jumpto);\n        }\n\n        loadedPages[jumpto].courses = reducedCourse;\n\n        // Reduce the course offset.\n        courseOffset--;\n\n        // Render the paged content for the current.\n        var pagedContentPage = getPagedContentContainer(root, jumpto);\n        renderCourses(root, loadedPages[jumpto]).then(function(html, js) {\n            return Templates.replaceNodeContents(pagedContentPage, html, js);\n        }).catch(Notification.exception);\n\n        // Delete subsequent pages in order to trigger the callback.\n        loadedPages.forEach(function(courseList, index) {\n            if (index > jumpto) {\n                var page = getPagedContentContainer(root, index);\n                page.remove();\n            }\n        });\n    };\n\n    /**\n     * Set the courses favourite status and push to repository\n     *\n     * @param  {Number} courseId Course id to favourite.\n     * @param  {Bool} status new favourite status.\n     * @return {Promise} Repository promise.\n     */\n    var setCourseFavouriteState = function(courseId, status) {\n\n        return Repository.setFavouriteCourses({\n            courses: [{\n                'id': courseId,\n                'favourite': status\n            }]\n        }).then(function(result) {\n            if (result.warnings.length == 0) {\n                loadedPages.forEach(function(courseList) {\n                    courseList.courses.forEach(function(course, index) {\n                        if (course.id == courseId) {\n                            courseList.courses[index].isfavourite = status;\n                        }\n                    });\n                });\n                return true;\n            } else {\n                return false;\n            }\n        }).catch(Notification.exception);\n    };\n\n    /**\n     * Render the dashboard courses.\n     *\n     * @param {object} root The root element for the courses view.\n     * @param {array} coursesData containing array of returned courses.\n     * @return {promise} jQuery promise resolved after rendering is complete.\n     */\n    var renderCourses = function(root, coursesData) {\n\n        var filters = getFilterValues(root);\n\n        var currentTemplate = '';\n        if (filters.display == 'card') {\n            currentTemplate = TEMPLATES.COURSES_CARDS;\n        } else if (filters.display == 'list') {\n            currentTemplate = TEMPLATES.COURSES_LIST;\n        } else {\n            currentTemplate = TEMPLATES.COURSES_SUMMARY;\n        }\n\n        // Whether the course category should be displayed in the course item.\n        coursesData.courses = coursesData.courses.map(function(course) {\n            course.showcoursecategory = filters.displaycategories == 'on' ? true : false;\n            return course;\n        });\n\n        if (coursesData.courses.length) {\n            return Templates.render(currentTemplate, {\n                courses: coursesData.courses,\n            });\n        } else {\n            var nocoursesimg = root.find(Selectors.courseView.region).attr('data-nocoursesimg');\n            return Templates.render(TEMPLATES.NOCOURSES, {\n                nocoursesimg: nocoursesimg\n            });\n        }\n    };\n\n    /**\n     * Return the callback to be passed to the subscribe event\n     *\n     * @param {Number} limit The paged limit that is passed through the event\n     */\n    var setLimit = function(limit) {\n        this.find(Selectors.courseView.region).attr('data-paging', limit);\n    };\n\n    /**\n     * Intialise the paged list and cards views on page load.\n     * Returns an array of paged contents that we would like to handle here\n     *\n     * @param {object} root The root element for the courses view\n     * @param {string} namespace The namespace for all the events attached\n     */\n    var registerPagedEventHandlers = function(root, namespace) {\n        var event = namespace + PagedContentEvents.SET_ITEMS_PER_PAGE_LIMIT;\n        PubSub.subscribe(event, setLimit.bind(root));\n    };\n\n    /**\n     * Intialise the courses list and cards views on page load.\n     *\n     * @param {object} root The root element for the courses view.\n     */\n    var initializePagedContent = function(root) {\n        namespace = \"block_myoverview_\" + root.attr('id') + \"_\" + Math.random();\n\n        var pagingLimit = parseInt(root.find(Selectors.courseView.region).attr('data-paging'), 10);\n        var itemsPerPage = NUMCOURSES_PERPAGE.map(function(value) {\n            var active = false;\n            if (value == pagingLimit) {\n                active = true;\n            }\n\n            return {\n                value: value,\n                active: active\n            };\n        });\n\n        // Filter out all pagination options which are too large for the amount of courses user is enrolled in.\n        var totalCourseCount = parseInt(root.find(Selectors.courseView.region).attr('data-totalcoursecount'), 10);\n        itemsPerPage = itemsPerPage.filter(function(pagingOption) {\n            return pagingOption.value < totalCourseCount || pagingOption.value === 0;\n        });\n\n        var filters = getFilterValues(root);\n        var config = $.extend({}, DEFAULT_PAGED_CONTENT_CONFIG);\n        config.eventNamespace = namespace;\n\n        var pagedContentPromise = PagedContentFactory.createWithLimit(\n            itemsPerPage,\n            function(pagesData, actions) {\n                var promises = [];\n\n                pagesData.forEach(function(pageData) {\n                    var currentPage = pageData.pageNumber;\n                    var limit = (pageData.limit > 0) ? pageData.limit : 0;\n\n                    // Reset local variables if limits have changed.\n                    if (lastLimit != limit) {\n                        loadedPages = [];\n                        courseOffset = 0;\n                        lastPage = 0;\n                    }\n\n                    if (lastPage == currentPage) {\n                        // If we are on the last page and have it's data then load it from cache.\n                        actions.allItemsLoaded(lastPage);\n                        promises.push(renderCourses(root, loadedPages[currentPage]));\n                        return;\n                    }\n\n                    lastLimit = limit;\n\n                    // Get 2 pages worth of data as we will need it for the hidden functionality.\n                    if (loadedPages[currentPage + 1] == undefined) {\n                        if (loadedPages[currentPage] == undefined) {\n                            limit *= 2;\n                        }\n                    }\n\n                    var pagePromise = getMyCourses(\n                        filters,\n                        limit\n                    ).then(function(coursesData) {\n                        var courses = coursesData.courses;\n                        var nextPageStart = 0;\n                        var pageCourses = [];\n\n                        // If current page's data is loaded make sure we max it to page limit.\n                        if (loadedPages[currentPage] != undefined) {\n                            pageCourses = loadedPages[currentPage].courses;\n                            var currentPageLength = pageCourses.length;\n                            if (currentPageLength < pageData.limit) {\n                                nextPageStart = pageData.limit - currentPageLength;\n                                pageCourses = $.merge(loadedPages[currentPage].courses, courses.slice(0, nextPageStart));\n                            }\n                        } else {\n                            // When the page limit is zero, there is only one page of courses, no start for next page.\n                            nextPageStart = pageData.limit || false;\n                            pageCourses = (pageData.limit > 0) ? courses.slice(0, pageData.limit) : courses;\n                        }\n\n                        // Finished setting up the current page\n                        loadedPages[currentPage] = {\n                            courses: pageCourses\n                        };\n\n                        // Set up the next page (if there is more than one page).\n                        var remainingCourses = nextPageStart !== false ? courses.slice(nextPageStart, courses.length) : [];\n                        if (remainingCourses.length) {\n                            loadedPages[currentPage + 1] = {\n                                courses: remainingCourses\n                            };\n                        }\n\n                        // Set the last page to either the current or next page.\n                        if (loadedPages[currentPage].courses.length < pageData.limit || !remainingCourses.length) {\n                            lastPage = currentPage;\n                            actions.allItemsLoaded(currentPage);\n                        } else if (loadedPages[currentPage + 1] != undefined\n                            && loadedPages[currentPage + 1].courses.length < pageData.limit) {\n                            lastPage = currentPage + 1;\n                        }\n\n                        courseOffset = coursesData.nextoffset;\n                        return renderCourses(root, loadedPages[currentPage]);\n                    })\n                    .catch(Notification.exception);\n\n                    promises.push(pagePromise);\n                });\n\n                return promises;\n            },\n            config\n        );\n\n        pagedContentPromise.then(function(html, js) {\n            registerPagedEventHandlers(root, namespace);\n            return Templates.replaceNodeContents(root.find(Selectors.courseView.region), html, js);\n        }).catch(Notification.exception);\n    };\n\n    /**\n     * Listen to, and handle events for  the myoverview block.\n     *\n     * @param {Object} root The myoverview block container element.\n     */\n    var registerEventListeners = function(root) {\n        CustomEvents.define(root, [\n            CustomEvents.events.activate\n        ]);\n\n        root.on(CustomEvents.events.activate, SELECTORS.ACTION_ADD_FAVOURITE, function(e, data) {\n            var favourite = $(e.target).closest(SELECTORS.ACTION_ADD_FAVOURITE);\n            var courseId = getCourseId(favourite);\n            addToFavourites(root, courseId);\n            data.originalEvent.preventDefault();\n        });\n\n        root.on(CustomEvents.events.activate, SELECTORS.ACTION_REMOVE_FAVOURITE, function(e, data) {\n            var favourite = $(e.target).closest(SELECTORS.ACTION_REMOVE_FAVOURITE);\n            var courseId = getCourseId(favourite);\n            removeFromFavourites(root, courseId);\n            data.originalEvent.preventDefault();\n        });\n\n        root.on(CustomEvents.events.activate, SELECTORS.ACTION_MAKE_VISIBLE, function(e, data) {\n            var elt = $(e.target).closest(SELECTORS.ACTION_MAKE_VISIBLE);\n            var courseId = getCourseId(elt);\n            confirmAction(root, courseId, 'makeVisible', '');\n            data.originalEvent.preventDefault();\n        });\n\n        root.on(CustomEvents.events.activate, SELECTORS.ACTION_MAKE_INVISIBLE, function(e, data) {\n            var elt = $(e.target).closest(SELECTORS.ACTION_MAKE_INVISIBLE);\n            var courseId = getCourseId(elt);\n            confirmAction(root, courseId, 'makeInvisible', '');\n            data.originalEvent.preventDefault();\n        });\n\n        root.on(CustomEvents.events.activate, SELECTORS.ACTION_UNENROLME, function(e, data) {\n            var target = $(e.target).closest(SELECTORS.ACTION_UNENROLME);\n            var courseId = getCourseId(target);\n            var instanceId = $(e.target).attr('data-enrol-id');\n            var extraargs = {\n                'instanceId': instanceId,\n                'target': target\n            };\n            confirmAction(root, courseId, 'unenrolMe', extraargs);\n            data.originalEvent.preventDefault();\n        });\n\n        root.on(CustomEvents.events.activate, SELECTORS.FAVOURITE_ICON, function(e, data) {\n            data.originalEvent.preventDefault();\n        });\n\n        root.on(CustomEvents.events.activate, SELECTORS.ACTION_HIDE_COURSE, function(e, data) {\n            var target = $(e.target).closest(SELECTORS.ACTION_HIDE_COURSE);\n            var courseId = getCourseId(target);\n            hideCourse(root, courseId);\n            data.originalEvent.preventDefault();\n        });\n\n        root.on(CustomEvents.events.activate, SELECTORS.ACTION_SHOW_COURSE, function(e, data) {\n            var target = $(e.target).closest(SELECTORS.ACTION_SHOW_COURSE);\n            var courseId = getCourseId(target);\n            showCourse(root, courseId);\n            data.originalEvent.preventDefault();\n        });\n    };\n\n    /**\n     * Intialise the courses list and cards views on page load.\n     *\n     * @param {object} root The root element for the courses view.\n     */\n    var init = function(root) {\n        root = $(root);\n        loadedPages = [];\n        lastPage = 0;\n        courseOffset = 0;\n\n        initializePagedContent(root);\n\n        if (!root.attr('data-init')) {\n            registerEventListeners(root);\n            root.attr('data-init', true);\n        }\n    };\n\n    /**\n\n     * Reset the courses views to their original\n     * state on first page load.courseOffset\n     *\n     * This is called when configuration has changed for the event lists\n     * to cause them to reload their data.\n     *\n     * @param {Object} root The root element for the timeline view.\n     */\n    var reset = function(root) {\n        if (loadedPages.length > 0) {\n            loadedPages.forEach(function(courseList, index) {\n                var pagedContentPage = getPagedContentContainer(root, index);\n                renderCourses(root, courseList).then(function(html, js) {\n                    return Templates.replaceNodeContents(pagedContentPage, html, js);\n                }).catch(Notification.exception);\n            });\n        } else {\n            init(root);\n        }\n    };\n\n    return {\n        init: init,\n        reset: reset\n    };\n});\n"],"names":["define","$","Str","Repository","PagedContentFactory","PubSub","CustomEvents","Notification","Templates","CourseEvents","Selectors","PagedContentEvents","ModalFactory","ModalEvents","SELECTORS","TEMPLATES","GROUPINGS","NUMCOURSES_PERPAGE","loadedPages","courseOffset","lastPage","lastLimit","namespace","confirmAction","root","courseId","method","args","strings","modalPromise","push","key","component","create","type","types","SAVE_CANCEL","then","deleteModal","show","fail","exception","stringsPromise","get_strings","finalPromise","when","setTitle","setBody","setSaveButtonText","getRoot","on","save","makeVisible","makeInvisible","unenrolMe","instanceId","hideElement","target","getFilterValues","courseRegion","find","courseView","region","display","attr","grouping","sort","displaycategories","customfieldname","customfieldvalue","DEFAULT_PAGED_CONTENT_CONFIG","ignoreControlWhileLoading","controlPlacementBottom","persistentLimitKey","getFavouriteIconContainer","getPagedContentContainer","index","getCourseId","getAddFavouriteMenuItem","getRemoveFavouriteMenuItem","addToFavourites","removeAction","addAction","setCourseFavouriteState","success","publish","favourited","removeClass","addClass","iconContainer","isFavouriteIcon","notFavourteIcon","showFavouriteIcon","alert","catch","removeFromFavourites","unfavorited","hideFavouriteIcon","getMakeVisibleMenuItem","getMakeInvisibleMenuItem","getCourseNameItem","getCourseHiddenWarningItem","makeVisibleAction","makeInvisibleAction","courseName","courseHiddenWarning","setCourseVisibility","visible","changeCourseVisibility","id","result","warnings","length","forEach","courseList","courses","course","courseListElement","getCourseListElement","remove","getHideCourseMenuItem","getShowCourseMenuItem","setCourseHiddenState","status","updateUserPreferences","preferences","value","pagingBar","jumpto","parseInt","reducedCourse","reduce","accumulator","current","undefined","newElement","slice","popElement","merge","pagedContentContainer","resetLastPageNumber","pagedContentPage","renderCourses","html","js","replaceNodeContents","setFavouriteCourses","isfavourite","coursesData","filters","currentTemplate","map","showcoursecategory","render","nocoursesimg","setLimit","limit","this","registerPagedEventHandlers","event","SET_ITEMS_PER_PAGE_LIMIT","subscribe","bind","initializePagedContent","Math","random","pagingLimit","itemsPerPage","active","totalCourseCount","filter","pagingOption","config","extend","eventNamespace","pagedContentPromise","createWithLimit","pagesData","actions","promises","pageData","currentPage","pageNumber","allItemsLoaded","pagePromise","getEnrolledCoursesByTimeline","offset","classification","getMyCourses","nextPageStart","pageCourses","currentPageLength","remainingCourses","nextoffset","registerEventListeners","events","activate","e","data","favourite","closest","originalEvent","preventDefault","elt","hideAction","showAction","hideCourse","showCourse","init","reset"],"mappings":"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"}